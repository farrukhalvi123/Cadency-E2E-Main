Index: Pages/InvoicePage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport re\r\nfrom random import *\r\nimport time\r\nfrom datetime import date, datetime, timedelta\r\nimport random\r\nimport string\r\n\r\nimport requests\r\nfrom PyPDF2 import PdfReader\r\nfrom bs4 import BeautifulSoup\r\nfrom Constants.URLS import TestData\r\nfrom selenium import webdriver\r\nfrom webdriver_manager.chrome import ChromeDriverManager\r\nfrom selenium.webdriver import Keys\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.support.wait import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\nfrom Constants.URLS import TestData\r\n# from Elements.InvoiceElements import invoiceelements\r\n# from Elements.Customer_elements import customerelements\r\nfrom selenium.common import exceptions, NoSuchElementException, TimeoutException\r\nfrom selenium.webdriver import ActionChains\r\nimport csv\r\nimport PyPDF2\r\n\r\nWORDS = \"\".join((random.choice(string.ascii_letters) for i in range(10)))\r\nrandinteger = ''.join([\"{}\".format(randint(0, 5)) for num in range(0, 3)])\r\nclass InvoicePage():\r\n\r\n    def __init__(self, driver):\r\n        self.driver = driver\r\n        # self.invnum = \"//a[normalize-space()='\" + INV_NUM + \"']\"\r\n        self.LOGO = \"//div[@class='header-container']//img[@alt='Logo image']\"\r\n        self.CUSTOMERANDRECEIVABLETAB = \"//p[normalize-space()='Customers & Receivables']\"\r\n        self.INVOICETAB =  \"//p[normalize-space()='Invoices']\"\r\n        self.ADDINVOICEBTN = \"//button[@class='p-element p-button-primary button-with-icon btn-150 p-button p-component']\"\r\n        self.CUSTNAMEDD =  \"(//span[@class='p-button-icon pi pi-chevron-down'])[1]\"\r\n        self.CUSTNAMEDD_VALUE =  \"(//li[@role='option'])[3]\"\r\n        self.CUSTNAMEDD_VALUE1 =  \"//span[normalize-space()='+ Add New Customer']\"\r\n        self.CURRENCYDD =  \"currency\"\r\n        self.CURRENCY = \"p-ripple.p-element.p-dropdown-item\"\r\n        self.EXCHANGERATE =  \"//a[normalize-space()='Modify Rate']\"\r\n        self.REFERENCE =  \"//input[@placeholder='Enter Reference']\"\r\n        self.ITEMSELECTION = \"//button[@class='p-element p-ripple p-autocomplete-dropdown ng-tns-c107-56 p-button p-component p-button-icon-only ng-star-inserted']//span[@class='p-button-icon pi pi-chevron-down']\"\r\n        self.DESCRIPTION =  \"//input[@placeholder='Note']\"\r\n        self.QUANTITY =  \"//input[@placeholder='Quantity']\"\r\n        self.PRICE =  \"//input[@placeholder='Price']\"\r\n        self.DISCOUNT =  \"//input[@placeholder='Disc %']\"\r\n        self.TAXDD = \"//*[contains(@class,'p-element p-ripple p-autocomplete-dropdown ng-tns')]\"\r\n        self.TAXSELECT = \"//*[contains(@class,'p-ripple p-element p-autocomplete-item ng-tns')]\"\r\n        self.SAVEBTN =  \"//button[@class='p-element p-button-primary btn-150 p-button p-component']\"\r\n        self.INV_EMAIL =  \"customerEmail\"\r\n        self.INVNUM =  \"customerName\"\r\n        self.INVDATE = \"//input[@placeholder='Please select invoice date']\"\r\n        self.INVDUEDATE = \"//input[@placeholder='Please select due date']\"\r\n        self.INVITEMSDD = '//button[contains(@class,\"p-element p-ripple p-autocomplete-dropdown ng-tns\")]'\r\n        self.ADDINVITEMS = \"//*[contains(@class,'p-ripple p-element p-autocomplete-item ng-tns')]\"\r\n        self.ADDITEMNAME =  \"name\"\r\n        self.ADDITEMCODE =  \"code\"\r\n        self.ADDITEMTYPEDD = '//*[contains(@class,\"p-dropdown-trigger ng-tns\")]'\r\n        self.ADDITEMTYPE =  \"//li[@aria-label='Inventory']\"\r\n        self.ADDITEMUNITPRICEID =  \"//input[@placeholder='Enter unit price']\"\r\n        self.ADDITEMUNITPRICETAGNAME = \"type\"\r\n        self.ADDITEMSAVEBUTTON =  \"(//button[@type='submit'])[3]\"\r\n        self.SELECTITEM =  \"//span[contains(text(),'+WORDS+')]\"\r\n        self.TAXRATENAME =  \"taxRateName\"\r\n        self.TAXCOMP =  \"//span[normalize-space()='Tax Component']\"\r\n        self.TAXRATE =  \"//p-inputnumber[@placeholder='Tax %']\"\r\n        self.AMOUNT =  \"//td[@class='td-amount max-width-100']\"\r\n        self.INVSEARCHFIELD =  \"//input[@placeholder='Search']\"\r\n        # self.INVOICE_NUMBER = \"//a[normalize-space()='\"+INV_NUM+\"']\"\r\n        self.CSVICON =  \"//div[@class='pages-section']//li[1]//div[1]\"\r\n        self.PDFICON =  \"//*[contains(@class,'p-element p-button action-pdf btn')]\"\r\n        self.ACTIONBUTTON = \"//*[contains(@class,'btn-container btn-center ng-star-inserted')]\"\r\n        self.STATUS = \"//*[contains(@class,'overflow-hidden status-column ng-star-inserted')]\"\r\n        self.DOWNLOADINVOICE =  \"//a[normalize-space()='Download Invoice']\"\r\n        self.CONFIRMATIONBTN = \"//button[@type='submit']\"\r\n        self.NEXTBTN = \"//span[@class='p-paginator-icon pi pi-angle-right']\"\r\n        self.PAGING = \"//div[@aria-label='dropdown trigger']\"\r\n        self.FIFTYITEMS = \"//span[normalize-space()='50']\"\r\n        self.ALLTILE = \"//li[@class='p-highlight ng-star-inserted']\"\r\n        self.DISPUTEDTILE = \"//div[@class='detailscreen-tabview left-aligned']//li[2]\"\r\n        self.OPENTILE = \"p-ripple.p-element.p-tabview-nav-link\"\r\n        self.DISPUTETAG = \"(//span[normalize-space()='Disputed'])\"\r\n        self.OPENSTATUS = \"status-container.status-blue.ng-star-inserted\"\r\n        self.PAIDSTATUS = \"status-container.status-green.ng-star-inserted\"\r\n        self.PARTIALLYPAIDSTATUS = \"status-container.status-orange.ng-star-inserted\"\r\n        self.WAITINGFORFUNDSTAB = \"status-container.status-orange3.ng-star-inserted\"\r\n        self.INVDETAILPAIDSTATUS = \"status-container.status-green.ng-star-inserted\"\r\n        self.INVDETAILPARTIALPAIDSTATUS = \"status-container.mr-2.status-orange.ng-star-inserted\"\r\n        self.INVDETAILWFFSTATUS = \"status-container.mr-2.status-orange3.ng-star-inserted\"\r\n        self.INVDETAILOPENSTATUS = \"status-container.mr-2.status-blue.ng-star-inserted\"\r\n        self.DUPLICATE = \"//a[normalize-space()='Duplicate']\"\r\n        self.INVOICEANDCUSTOMER = \"p-element.title-heading-1.text-primary-3\"\r\n        self.AMOUNT_BALANCE = \"max-width-300.amount-column.font-bold.ng-star-inserted\"\r\n        self.DELETE = \"//a[normalize-space()='Delete']\"\r\n        self.DELETEMSG = \"//div[@aria-label='Invoice deleted successfully.']\"\r\n        self.VIEW = \"//a[normalize-space()='View']\"\r\n        self.INVAMOUNT = \"//div[@class='amount']\"\r\n        self.INVNUMBER = \"//div[@class='invoice-title']\"\r\n        self.INVOICEEDIT = \"//button[@class='p-element p-icon-button overlay-primary-6 p-button p-component ng-star-inserted']\"\r\n        self.EMAILSEND = \"//button[@class='p-element p-icon-button overlay-primary-13 p-button p-component ng-star-inserted']\"\r\n        self.EMAILADDRESS = \"//a[normalize-space()='selinakyle@yopmail.com']\"\r\n        self.EMAILSENDTOLABEL = \"//span[@class='label-text']\"\r\n        self.DOWNLOADINVOICEBTN = \"//div[@class='p-icon-button']\"\r\n        self.EMAILBODY = \"//div[@class='angular-editor-textarea']\"\r\n        self.yop_EMAILFIELD = \"loginfmt\"\r\n        self.HOTPASS = \"passwd\"\r\n        self.DONTYESBTN = \"idSIButton9\"\r\n        self.JUNKMAIL = \"//div[@title='Junk Email']\"\r\n        self.EMAILS = \"zKDWD.YbB6r.IKvQi.IjQyD.JCRRb.G1NES\"\r\n        self.SUBJECT = \"subject\"\r\n        self.TOTALAMNT1 = \"//cadency-create-invoice[@class='ng-star-inserted']//li[4]\"\r\n        self.TOTALAMNT1c1 = \"grid-footer-text\"\r\n        self.INV_DETAIL_TOTAL = \"total\"\r\n        self.INVTOTAL = \"td\"\r\n        self.RECORDPAYMENT = \"Group_19996\"\r\n        self.AMOUNTRECIEVED = \"//input[@placeholder='Enter amount received']\"\r\n        self.PAYMENTDATE = \"//input[@placeholder='Select date']\"\r\n        self.PAYMENTMODEID = \"paymentTypeId\"\r\n        self.REFERENCENUMBERID = \"referenceNumber\"\r\n        self.ENTERNOTE = \"//textarea[@placeholder='Enter note']\"\r\n        self.BANKTRANSFER = \"//span[normalize-space()='Bank Transfer']\"\r\n        self.ATTACHMENTS = \"//button[@title='More actions']\"\r\n        self.DOWNLOADBTN = \"//span[normalize-space()='Download']\"\r\n\r\n\r\n\r\n    def ClickOnInvoiceTab(self):\r\n        CART = self.driver.find_element(By.XPATH,self.CUSTOMERANDRECEIVABLETAB)\r\n        self.driver.execute_script(\"arguments[0].click()\",CART)\r\n        INVT= self.driver.find_element(By.XPATH,self.INVOICETAB)\r\n        self.driver.execute_script(\"arguments[0].click()\", INVT)\r\n        time.sleep(10)\r\n    def close_leftsidemenu(self):\r\n        self.logo = WebDriverWait(self.driver,15).until(EC.presence_of_element_located((By.XPATH,self.LOGO)))\r\n        # self.logo = self.driver.find_element(By.XPATH,self.LOGO)\r\n        action = ActionChains(self.driver)\r\n        action.move_to_element(self.logo).perform()\r\n        time.sleep(4)\r\n\r\n\r\n\r\n\r\n    def ClickOnAddButton(self):\r\n        element = WebDriverWait(self.driver, 15).until(EC.presence_of_element_located((By.XPATH,self.ADDINVOICEBTN)))\r\n        # self.driver.find_element(By.XPATH,self.ADDINVOICEBTN).click()\r\n        self.driver.execute_script(\"arguments[0].click()\",element)\r\n    def open_customer_selection_dd(self):\r\n        time.sleep(2)\r\n        self.driver.find_element(By.XPATH,self.CUSTNAMEDD).click()\r\n\r\n    def select_customer(self):\r\n        time.sleep(2)\r\n        self.driver.find_element(By.XPATH,self.CUSTNAMEDD_VALUE).click()\r\n        global custname\r\n        custname = self.driver.find_element(By.XPATH,self.CUSTNAMEDD_VALUE)\r\n        print(custname.text)\r\n\r\n    def add_new_customer(self):\r\n        self.driver.find_element(By.XPATH,self.CUSTNAMEDD_VALUE1)\r\n        # if len(self.get_all_elements(self.CUSTNAMEDD_VALUE)) > 0 :\r\n        #     customers = self.driver.find_elementself.CUSTNAMEDD_VALUE)\r\n        #     print(customers.text)\r\n        #     customers[1].click()\r\n        #\r\n        # time.sleep(3)\r\n        # customername = self.driver.find_elementsself.CUSTNAMEDD_VALUE)\r\n        # for cust in customername:\r\n        #     cust.click()\r\n        #     print(cust.text)\r\n        #     break\r\n\r\n\r\n\r\n\r\n\r\n        # if cust == self.driver.find_elementsself.CUSTNAMEDD_VALUE):\r\n        #      cust[1].click()\r\n        #      break\r\n\r\n\r\n    def select_Currency(self):\r\n        self.driver.find_element(By.ID,self.CURRENCYDD)\r\n        time.sleep(5)\r\n        currencies = self.driver.find_elements(By.CLASS_NAME,self.CURRENCY)\r\n        # randomcurrency = random.choice(currencies)\r\n        # randomcurrency.click()\r\n        try:\r\n            for cur in currencies:\r\n                if cur.text == 'USD':\r\n                    cur.click()\r\n        except exceptions.StaleElementReferenceException as e:\r\n            print(e)\r\n            # pass\r\n            #         currencyselect[1].click()\r\n\r\n    def emailfield_status(self):\r\n        self.driver.find_element(By.ID,self.INV_EMAIL).is_enabled()\r\n\r\n    def invoice_num_status(self):\r\n        self.driver.find_element(By.ID,self.INVNUM).is_enabled()\r\n\r\n    def invoice_date(self):\r\n        global current_time\r\n        current_time = date.today().strftime('%m/%d/%Y')\r\n        datefield = self.driver.find_element(By.XPATH,self.INVDATE)\r\n        time.sleep(2)\r\n        datefield.send_keys(Keys.CONTROL + 'a' + Keys.NULL, current_time,Keys.ENTER)\r\n        time.sleep(5)\r\n\r\n    def invoice_duedate(self):\r\n        dom = float (''.join([\"{}\".format(randint(0, 9)) for num in range(0, 2)]))\r\n        current_time = date.today()\r\n        day = timedelta(days = dom)\r\n        dudate = (current_time+day).strftime('%m/%d/%Y')\r\n        datefield = self.driver.find_element(By.XPATH,self.INVDUEDATE)\r\n        datefield.send_keys(Keys.CONTROL + 'a' + Keys.NULL, dudate, Keys.ENTER)\r\n        time.sleep(2)\r\n    def add_an_item(self):\r\n        items = self.driver.find_elements(By.XPATH,self.ADDINVITEMS).click()\r\n        self.driver.find_element(By.ID,self.ADDITEMNAME).send_keys(WORDS)\r\n        n = 5\r\n        self.driver.find_element(By.ID, self.ADDITEMCODE).send_keys(randinteger)\r\n        self.driver.find_element(By.XPATH, self.ADDITEMUNITPRICEID).send_keys(randinteger)\r\n        self.driver.find_element(By.XPATH,self.ADDITEMSAVEBUTTON).click()\r\n        time.sleep(2)\r\n\r\n\r\n    def Add_inv_items(self):\r\n        taxdd = self.driver.find_elements(By.XPATH,self.TAXDD)\r\n        taxdd[1].click()\r\n        time.sleep(2)\r\n        try:\r\n            items = self.driver.find_elements(By.XPATH,self.ADDINVITEMS)\r\n            print(\"this is the list of items\",len(items))\r\n            items[2].click()\r\n        except:\r\n            self.add_an_item()\r\n    def Save_invoice(self):\r\n        SaveINV = self.driver.find_element(By.XPATH,self.SAVEBTN)\r\n        self.driver.execute_script(\"arguments[0].click()\",SaveINV)\r\n        time.sleep(5)\r\n\r\n    def enter_references(self):\r\n        self.driver.find_element(By.XPATH,self.REFERENCE).send_keys(WORDS)\r\n\r\n    def add_item_description(self,desc):\r\n        self.driver.find_element(By.XPATH,self.DESCRIPTION).clear()\r\n        self.driver.find_element(By.XPATH,self.DESCRIPTION).send_keys(desc)\r\n\r\n    def enter_quantity(self):\r\n        global quantity\r\n        self.randinteger = ''.join([\"{}\".format(randint(0, 9)) for num in range(0, 2)])\r\n        quantity = int (self.randinteger)\r\n        self.driver.find_element(By.XPATH, self.QUANTITY).clear()\r\n        self.driver.find_element(By.XPATH,self.QUANTITY).send_keys(quantity)\r\n\r\n    def enter_price(self):\r\n        global amnt\r\n        # # priceamnt = self.get_element_text(self.PRICE)\r\n        # print(\"this is the price amount\",priceamnt)\r\n        # if priceamnt == 0.00:\r\n        amnt = int (randinteger)\r\n        self.driver.find_element(By.XPATH, self.PRICE).clear()\r\n        self.driver.find_element(By.XPATH,self.PRICE).send_keys(amnt)\r\n        # else:\r\n        #     print(\"The amount is prefilled\",priceamnt)\r\n\r\n    def enter_discount(self):\r\n        global disc\r\n        self.randdisc = round(random.uniform(1.00, 99.99), 2)\r\n        disc = int (self.randdisc)\r\n        print(disc)\r\n        self.driver.find_element(By.XPATH, self.DISCOUNT).clear()\r\n        self.driver.find_element(By.XPATH,self.DISCOUNT).send_keys(disc)\r\n\r\n    def select_tax(self,tcomp,trate):\r\n        try:\r\n            taxdd = self.driver.find_elements(By.XPATH,self.TAXDD)\r\n            taxdd[2].click()\r\n            time.sleep(5)\r\n        except:\r\n            taxdd = self.driver.find_elements(By.XPATH, self.TAXDD)\r\n            taxdd[1].click()\r\n            time.sleep(5)\r\n        try:\r\n            taxes = self.driver.find_elements(By.XPATH,self.TAXSELECT)\r\n            print(\"This is the selected tax\",taxes[2].text)\r\n            taxes[2].click()\r\n            global select_tax\r\n            select_tax = taxes[2].text\r\n        except:\r\n            taxes = self.driver.find_elements(By.XPATH,self.TAXSELECT)\r\n            taxes[0].click()\r\n            self.enter_new_tax(tcomp,trate)\r\n\r\n    def enter_new_tax(self,tcomp,trate):\r\n        self.driver.find_element(By.ID,self.TAXRATENAME).send_keys(WORDS)\r\n        self.driver.find_element(By.XPATH,self.TAXCOMP).send_keys(tcomp)\r\n        self.driver.find_element(By.XPATH,self.TAXRATE, trate)\r\n        self.Save_invoice()\r\n\r\n    def invoice_amount(self):\r\n        self.amount = self.driver.find_element(By.XPATH,self.AMOUNT)\r\n        print(self.amount.text)\r\n\r\n    def total_amount(self):\r\n        # int (amnt)\r\n        # int (quantity)\r\n        amount = amnt * quantity\r\n        print (amnt)\r\n        print(quantity)\r\n        print(amount)\r\n        discount = (amount) * disc/100\r\n        discounted_amount = amount - discount\r\n        print(discounted_amount)\r\n        tax1 =  str (select_tax)\r\n        final_tax =  ''.join(x for x in tax1  if x.isdigit())\r\n        ftax = int (final_tax)\r\n        print(ftax)\r\n        tax_percentage = discounted_amount * ftax/100\r\n        # print(tax_percentage)\r\n        final_total = tax_percentage + discounted_amount\r\n        global totalamt\r\n        totalamt = round(final_total,2)\r\n        print(totalamt)\r\n        time.sleep(10)\r\n\r\n    def verify_total_amount(self):\r\n        # amount = self.driver.find_elements(By.CLASS_NAME,self.INVAMOUNT)\r\n        currency = \" \".format(float(totalamt))\r\n        print(currency)\r\n        assert currency in self.driver.page_source\r\n\r\n    def search_invoice(self):\r\n        global INV_NUM\r\n        INV_NUM = \"INV-0000\" + ''.join([\"{}\".format(randint(0, 9)) for num in range(0, 2)])\r\n        print(INV_NUM)\r\n        self.driver.find_element(By.XPATH,self.INVSEARCHFIELD).send_keys(INV_NUM + Keys.ENTER)\r\n        time.sleep(5)\r\n\r\n    def Verify_Searched_Invoice(self):\r\n        try:\r\n            INVOICE_NUMBER = self.driver.find_element(By.XPATH,\"//a[normalize-space()='\"+INV_NUM+\"']\")\r\n            print(INVOICE_NUMBER.text)\r\n            assert INVOICE_NUMBER.text == INV_NUM\r\n\r\n        except:\r\n            assert \"No records found\" in self.driver.page_source\r\n            print(\"No Record found\")\r\n    def clickCSVIcon(self):\r\n        self.driver.find_element(By.XPATH,self.CSVICON).click()\r\n    def Download_Excelfile(self):\r\n        time.sleep(5)\r\n        download_dir = os.getcwd() + '\\\\TestData\\\\TestExcelsandPDFS\\\\'\r\n        time.sleep(5)\r\n        file_path = max([download_dir + '/' + f for f in os.listdir(download_dir)], key=os.path.getctime)\r\n        file_name = os.path.basename(file_path)\r\n        print(file_name)\r\n        with open(download_dir + file_name, \"r\") as f:\r\n            reader = csv.reader(f)\r\n            print(reader)\r\n            for row in reader:\r\n                print(row)\r\n\r\n    def clickPDFIcon(self):\r\n        self.driver.find_element(By.XPATH,self.PDFICON).click()\r\n    def verify_pdffile(self):\r\n        self.download_dir = os.getcwd() + '\\\\TestData\\\\TestExcelsandPDFS'\r\n        time.sleep(5)\r\n        print(self.download_dir)\r\n        self.file_path = max([self.download_dir + '\\\\' + f for f in os.listdir(self.download_dir)])\r\n        self.file_name = os.path.basename(self.file_path)\r\n        print(self.file_name)\r\n        self.pdf_file = open(self.download_dir + '\\\\' + self.file_name, 'rb')\r\n        self.reader = PdfReader(self.pdf_file)\r\n        self.pdf_text = ''\r\n        for page in range(len(self.reader.pages)):\r\n            self.pdf_text += self.reader.pages[page].extract_text()\r\n            print(self.pdf_text)\r\n\r\n\r\n    def download_oneinvoice(self):\r\n        time.sleep(4)\r\n        actionbtns =  self.driver.find_elements(By.XPATH,self.ACTIONBUTTON)\r\n        for act in actionbtns:\r\n            status = self.driver.find_elements(By.XPATH,self.STATUS)\r\n            for stat in status:\r\n                if stat.text == 'Open':\r\n                    print(stat.text)\r\n                    act.click()\r\n                    self.driver.find_element(By.XPATH,self.DOWNLOADINVOICE)\r\n                    time.sleep(5)\r\n                    self.verify_pdffile()\r\n                    break\r\n            break\r\n\r\n\r\n        time.sleep(5)\r\n\r\n    def ALLtab(self):\r\n        try:\r\n            time.sleep(2)\r\n            self.driver.find_element(By.XPATH,self.ALLTILE).click()\r\n            time.sleep(3)\r\n        except exceptions.StaleElementReferenceException as e:\r\n            print(e)\r\n        # self.driver.execute_script(\"arguments[0].click()\", element)\r\n\r\n    def Disputedtab(self):\r\n        try:\r\n            self.driver.find_element(By.XPATH,self.DISPUTEDTILE).click()\r\n            time.sleep(3)\r\n        except exceptions.StaleElementReferenceException as e:\r\n            print(e)\r\n        # self.driver.execute_script(\"arguments[0].click()\", element)\r\n\r\n    def OpentabINV(self):\r\n        try:\r\n            opentab = self.driver.find_elements(By.CLASS_NAME,self.OPENTILE)\r\n            opentab[3].click()\r\n            time.sleep(3)\r\n        except exceptions.StaleElementReferenceException as e:\r\n            print(e)\r\n\r\n    time.sleep(10)\r\n        # self.driver.execute_script(\"arguments[0].click()\", element)\r\n\r\n    def verify_numberof_invoices(self):\r\n        try:\r\n            paging = self.driver.find_element(By.XPATH, self.PAGING)\r\n            self.driver.execute_script(\"arguments[0].click()\", paging)\r\n            self.driver.find_element(By.XPATH, self.FIFTYITEMS).click()\r\n            time.sleep(2)\r\n            num_invoices = self.driver.find_elements(By.XPATH,self.ACTIONBUTTON)\r\n            global num_total\r\n            num_total = len(num_invoices)\r\n            if num_total == 50:\r\n                    self.driver.find_element(By.XPATH, self.NEXTBTN).click()\r\n                    print(\"Total number of invoices:\", num_total)\r\n            elif num_total <= 50:\r\n                print(\"Total number of invoices:\", num_total)\r\n        except:\r\n            print(\"there are 0 invoice present in this tab.\")\r\n\r\n    def disputed_invoices(self):\r\n        self.verify_numberof_invoices()\r\n        disputetag = self.driver.find_elements(By.XPATH,self.DISPUTETAG)\r\n        print(\"this is the number of dispute invoices\",len(disputetag))\r\n        assert num_total == len(disputetag) ,\"Dispute tags and invoices are not equal\"\r\n\r\n\r\n    def open_invoices(self):\r\n        self.verify_numberof_invoices()\r\n        Invoiceopen  = self.driver.find_elements(By.CLASS_NAME,self.OPENSTATUS)\r\n        print(\"this is the number of open invoices\",len(Invoiceopen))\r\n        print(\"num_total count = \", num_total)\r\n        assert len(Invoiceopen ) == num_total, \"Open invoices donot match\"\r\n\r\n\r\n    def PaidtabINV(self):\r\n        try:\r\n            time.sleep(1)\r\n            opentab = self.driver.find_elements(By.CLASS_NAME,self.OPENTILE)\r\n            time.sleep(10)\r\n            opentab[4].click()\r\n            time.sleep(3)\r\n        except exceptions.StaleElementReferenceException as e:\r\n            print(e)\r\n\r\n    def paid_invoices(self):\r\n        self.verify_numberof_invoices()\r\n        paid_invoice = self.driver.find_elements(By.CLASS_NAME,self.PAIDSTATUS)\r\n        print(\"this is the number of open invoices\",len(paid_invoice))\r\n        assert len(paid_invoice) == num_total, \"Paid invoices donot match\"\r\n\r\n    def PartiallyPaidtabINV(self):\r\n        try:\r\n            opentab = self.driver.find_elements(By.CLASS_NAME, self.OPENTILE)\r\n            opentab[5].click()\r\n            time.sleep(3)\r\n        except exceptions.StaleElementReferenceException as e:\r\n            print(e)\r\n\r\n    def partially_paid_invoices(self):\r\n        self.verify_numberof_invoices()\r\n        partiallypaid_invoice = self.driver.find_elements(By.CLASS_NAME,self.PARTIALLYPAIDSTATUS)\r\n        print(\"this is the number of open invoices\",len(partiallypaid_invoice))\r\n        assert len(partiallypaid_invoice) == num_total, \"Partially Paid invoices donot match\"\r\n\r\n\r\n    def WaitingfofundsTab(self):\r\n        try:\r\n            opentab = self.driver.find_elements(By.CLASS_NAME, self.OPENTILE)\r\n            opentab[7].click()\r\n            time.sleep(3)\r\n        except exceptions.StaleElementReferenceException as e:\r\n            print(e)\r\n\r\n    def waitingforfunds_invoices(self):\r\n        self.verify_numberof_invoices()\r\n        waitingforfunds_invoice = self.driver.find_elements(By.CLASS_NAME,self.WAITINGFORFUNDSTAB)\r\n        print(\"this is the number of open invoices\",len(waitingforfunds_invoice))\r\n        print(\"num_total count = \", num_total)\r\n        assert len(waitingforfunds_invoice) == num_total, \"Partially Paid invoices donot match\"\r\n\r\n\r\n    def click_moreoptions(self):\r\n        moreoption = WebDriverWait(self.driver, 15).until(EC.presence_of_all_elements_located((By.XPATH,self.ACTIONBUTTON)))\r\n        moreoption[0].click()\r\n\r\n    def duplicate_invoice(self):\r\n        INVNUMBER = self.driver.find_elements(By.CLASS_NAME, self.INVOICEANDCUSTOMER)\r\n        print(INVNUMBER[0].text)\r\n        AMOUNTBALANCE = self.driver.find_elements(By.CLASS_NAME, self.AMOUNT_BALANCE)\r\n        print(AMOUNTBALANCE[0].text)\r\n        self.click_moreoptions()\r\n        dup = self.driver.find_element(By.XPATH,self.DUPLICATE)\r\n        self.driver.execute_script(\"arguments[0].click()\",dup)\r\n        time.sleep(1)\r\n        price = self.driver.find_element(By.XPATH, self.PRICE)\r\n        print(price.text)\r\n        self.Save_invoice()\r\n        AMOUNTBALANCE = self.driver.find_elements(By.CLASS_NAME, self.AMOUNT_BALANCE)\r\n        assert AMOUNTBALANCE[0].text == AMOUNTBALANCE[2].text, \"Invoice is not duplicate\"\r\n        Invoiceopen = self.driver.find_elements(By.CLASS_NAME,self.OPENSTATUS)\r\n        assert Invoiceopen[0].text == \"Open\"\r\n\r\n    def delete_invoice(self):\r\n        self.driver.find_element(By.XPATH,self.DELETE).click()\r\n        self.driver.find_element(By.XPATH,self.CONFIRMATIONBTN).click()\r\n        time.sleep(1)\r\n        deletemsg = self.driver.find_element(By.XPATH,self.DELETEMSG)\r\n        assert deletemsg.text == \"Invoice deleted successfully.\", \"Pop up did not appear\"\r\n\r\n    def view_invoice(self):\r\n        INVNUMBER = self.driver.find_elements(By.CLASS_NAME, self.INVOICEANDCUSTOMER)\r\n        print(INVNUMBER[0].text)\r\n        self.INVM = INVNUMBER[0].text\r\n        AMOUNTBALANCE = self.driver.find_elements(By.CLASS_NAME, self.AMOUNT_BALANCE)\r\n        print(AMOUNTBALANCE[0].text)\r\n        self.AMNTBAL = AMOUNTBALANCE[0].text\r\n        self.driver.find_element(By.XPATH,self.VIEW).click()\r\n        time.sleep(4)\r\n\r\n\r\n    def verify_invoice_Details(self):\r\n            amount = self.driver.find_element(By.XPATH,self.INVAMOUNT)\r\n            invnumber = self.driver.find_element(By.XPATH,self.INVNUMBER)\r\n            print(amount.text)\r\n            print(invnumber.text)\r\n            # assert self.AMNTBAL == amount.text ,\"Amount is not equal or invoice listings and details are not the same\"\r\n            # assert self.INVM == invnumber.text,\"Invoice number does not match or invoice listings and details are not the same\"\r\n\r\n    def editinvoice(self):\r\n        edit = self.driver.find_element(By.XPATH,self.INVOICEEDIT)\r\n        edit.click()\r\n        time.sleep(2)\r\n\r\n    def Verify_Send_Email(self): # this is only downloading invoice.\r\n        senderemail = self.driver.find_element(By.XPATH,self.EMAILADDRESS)\r\n        print(senderemail.text)\r\n        self.driver.find_element(By.XPATH,self.EMAILSEND).click()\r\n        time.sleep(1)\r\n        sendlabel = self.driver.find_element(By.XPATH, self.EMAILSENDTOLABEL)\r\n        print(sendlabel.text)\r\n        assert senderemail.text == sendlabel.text,\"sender email donot match\"\r\n        self.driver.find_element(By.XPATH,self.DOWNLOADINVOICEBTN).click()\r\n        subject  = self.driver.find_element(By.ID,self.SUBJECT)\r\n        subject.clear()\r\n        subject.send_keys(\"This is a dummy invoice\")\r\n        self.body = self.driver.find_element(By.XPATH,self.EMAILBODY)\r\n        print(self.body.text)\r\n        global subjecttext\r\n        subjecttext = subject.text\r\n        time.sleep(5)\r\n        self.download_dir2 = os.getcwd() + '\\\\TestData\\\\TestExcelsandPDFS\\\\'\r\n        time.sleep(5)\r\n        self.file_path2 = max([self.download_dir2 + '\\\\' + f for f in os.listdir(self.download_dir2)])\r\n        self.file_name2 = os.path.basename(self.file_path2)\r\n        print(self.file_name2)\r\n        self.pdf_file2 = open(self.download_dir2 + '\\\\' + self.file_name2, 'rb')\r\n        self.reader2 = PdfReader(self.pdf_file2)\r\n        self.pdf_text2 = ''\r\n        for page in range(len(self.reader2.pages)):\r\n            self.pdf_text2 += self.reader2.pages[page].extract_text()\r\n            print(self.pdf_text2)\r\n    def send_email(self):\r\n        self.driver.find_element(By.XPATH,self.CONFIRMATIONBTN).click()\r\n\r\n    def verify_sent_email(self):\r\n        driver = webdriver.Chrome(ChromeDriverManager().install())\r\n        driver.get(\"https://outlook.office365.com/mail/inbox\")\r\n        driver.maximize_window()\r\n        time.sleep(10)\r\n        driver.find_element(By.NAME, self.yop_EMAILFIELD).send_keys(\"datasoft_autotest@hotmail.com\")\r\n        driver.find_element(By.NAME, self.yop_EMAILFIELD).send_keys(Keys.ENTER)\r\n        time.sleep(2)\r\n        driver.find_element(By.NAME, self.HOTPASS).send_keys(\"Cadency@123\")\r\n        driver.find_element(By.NAME,self.HOTPASS).send_keys(Keys.ENTER)\r\n        time.sleep(2)\r\n        driver.find_element(By.ID,self.DONTYESBTN).click()\r\n        time.sleep(3)\r\n        driver.find_element(By.XPATH,self.JUNKMAIL).click()\r\n        self.emaillist = driver.find_elements(By.CLASS_NAME,self.EMAILS)\r\n        self.emaillist[0].click()\r\n\r\n\r\n    def verify_edited_invoice(self):\r\n        time.sleep(3)\r\n        finaltotal = self.driver.find_element(By.XPATH,self.TOTALAMNT1)\r\n        # finaltotal = total[3].find_elements(By.CLASS_NAME,self.TOTALAMNT1c1)\r\n        # for ftotal in finaltotal:\r\n        #     time.sleep(2)\r\n        print(finaltotal.text)\r\n        string = finaltotal.text\r\n        pattern = r'[0-9,.]+'\r\n        matches = re.findall(pattern, string)\r\n        global result\r\n        result = ''.join(matches)\r\n        print(\"This is the final\",result)\r\n    def invoice_Edited_successfully(self):\r\n        inv_det_total = self.driver.find_element(By.ID,self.INV_DETAIL_TOTAL)\r\n        inv_det = inv_det_total.find_elements(By.TAG_NAME,self.INVTOTAL)\r\n        global invoicetotal\r\n        invoicetotal = inv_det[1].text\r\n        if invoicetotal.startswith(\"$\"):\r\n            invoicetotal = invoicetotal[1:]\r\n            famount = re.sub('[^0-9.]', '', invoicetotal)\r\n            print(famount)\r\n            print(totalamt)\r\n    def record_payment_btn(self):\r\n        self.driver.find_element(By.ID,self.RECORDPAYMENT).click()\r\n        time.sleep(1)\r\n    def fill_record_payments_form(self):\r\n        self.driver.find_element(By.XPATH, self.AMOUNTRECIEVED).clear()\r\n        self.driver.find_element(By.XPATH,self.AMOUNTRECIEVED).send_keys(randinteger)\r\n        current_time = date.today().strftime('%m/%d/%Y')\r\n        self.driver.find_element(By.XPATH,self.PAYMENTDATE).send_keys(Keys.CONTROL + 'a' + Keys.NULL, current_time,Keys.ENTER)\r\n        self.driver.find_element(By.ID,self.PAYMENTMODEID).click()\r\n        self.driver.find_element(By.XPATH,self.BANKTRANSFER).click()\r\n        self.driver.find_element(By.ID, self.REFERENCENUMBERID).clear()\r\n        self.driver.find_element(By.ID,self.REFERENCENUMBERID).send_keys(WORDS)\r\n        self.driver.find_element(By.XPATH,self.ENTERNOTE).send_keys(\"This is a note\")\r\n        self.driver.find_element(By.XPATH,self.SAVEBTN).click()\r\n        time.sleep(2)\r\n\r\n    def record_full_payment_form(self):\r\n        current_time = date.today().strftime('%m/%d/%Y')\r\n        self.driver.find_element(By.XPATH, self.PAYMENTDATE).send_keys(Keys.CONTROL + 'a' + Keys.NULL, current_time,\r\n                                                                       Keys.ENTER)\r\n        self.driver.find_element(By.ID, self.PAYMENTMODEID).click()\r\n        self.driver.find_element(By.XPATH, self.BANKTRANSFER).click()\r\n        self.driver.find_element(By.ID, self.REFERENCENUMBERID).clear()\r\n        self.driver.find_element(By.ID, self.REFERENCENUMBERID).send_keys(WORDS)\r\n        self.driver.find_element(By.XPATH, self.ENTERNOTE).send_keys(\"This is a note\")\r\n        self.driver.find_element(By.XPATH, self.SAVEBTN).click()\r\n        time.sleep(2)\r\n\r\n\r\n    def verify_status_InvoiceDetail(self):\r\n        try:\r\n            Invoicepaid = WebDriverWait(self.driver, 10).until(\r\n                EC.visibility_of_element_located((By.CLASS_NAME, self.INVDETAILPAIDSTATUS)))\r\n            if Invoicepaid == True:\r\n                assert Invoicepaid.text == 'Paid', \"Full Amount has not been paid\"\r\n        except (NoSuchElementException, TimeoutException):\r\n            try:\r\n                Invoicepartialpaid = WebDriverWait(self.driver, 10).until(\r\n                    EC.visibility_of_element_located((By.CLASS_NAME, self.INVDETAILPARTIALPAIDSTATUS)))\r\n                if Invoicepartialpaid == True:\r\n                    assert Invoicepartialpaid.text == 'Partially Paid', \"Full Amount has not been paid\"\r\n            except (NoSuchElementException, TimeoutException):\r\n                try:\r\n                    Invoicewff = WebDriverWait(self.driver, 10).until(\r\n                        EC.visibility_of_element_located((By.CLASS_NAME, self.INVDETAILWFFSTATUS)))\r\n                    if Invoicewff == True:\r\n                        assert Invoicewff.text == 'Waiting For Funds', \"Full Amount has not been paid\"\r\n                except (NoSuchElementException, TimeoutException):\r\n                    pass\r\n        finally:\r\n            Invoiceopen = WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located((By.CLASS_NAME, self.INVDETAILOPENSTATUS)))\r\n            if Invoiceopen == True:\r\n                assert Invoiceopen.text == 'Open', \"Full Amount has not been paid\"\r\n            else:\r\n                print(\"Error has occurred in invoice status\")\r\n\r\n\r\n    def verify_Thankyouemail_Contents(self):\r\n        driver = webdriver.Chrome(ChromeDriverManager().install())\r\n        driver.get(\"https://outlook.office365.com/mail/inbox\")\r\n        driver.maximize_window()\r\n        time.sleep(3)\r\n        driver.find_element(By.NAME, self.yop_EMAILFIELD).send_keys(\"datasoft_autotest@hotmail.com\")\r\n        driver.find_element(By.NAME, self.yop_EMAILFIELD).send_keys(Keys.ENTER)\r\n        time.sleep(4)\r\n        driver.find_element(By.NAME, self.HOTPASS).send_keys(\"Cadency@123\")\r\n        driver.find_element(By.NAME, self.HOTPASS).send_keys(Keys.ENTER)\r\n        time.sleep(3)\r\n        driver.find_element(By.ID, self.DONTYESBTN).click()\r\n        time.sleep(3)\r\n        driver.find_element(By.XPATH, self.JUNKMAIL).click()\r\n        time.sleep(2)\r\n        self.emaillist = driver.find_elements(By.CLASS_NAME, self.EMAILS)\r\n        print(len(self.emaillist))\r\n        self.emaillist[0].click()\r\n        time.sleep(10)\r\n        driver.find_element(By.XPATH,self.ATTACHMENTS).click()\r\n        driver.find_element(By.XPATH,self.DOWNLOADBTN).click()\r\n        time.sleep(2)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Pages/InvoicePage.py b/Pages/InvoicePage.py
--- a/Pages/InvoicePage.py	(revision a1757c42748b23623db55a485268e9854d98ff06)
+++ b/Pages/InvoicePage.py	(date 1689664088686)
@@ -8,7 +8,7 @@
 
 import requests
 from PyPDF2 import PdfReader
-from bs4 import BeautifulSoup
+# from bs4 import BeautifulSoup
 from Constants.URLS import TestData
 from selenium import webdriver
 from webdriver_manager.chrome import ChromeDriverManager
